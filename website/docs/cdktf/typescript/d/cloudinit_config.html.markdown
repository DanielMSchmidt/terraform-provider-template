---
layout: "template"
page_title: "Template: cloudinit_multipart"
sidebar_current: "docs-template-datasource-cloudinit-config"
description: |-
  Renders a multi-part cloud-init config from source files.
---


<!-- Please do not edit this file, it is generated. -->
# template_cloudinit_config

Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
for use with [Cloud-init](https://cloudinit.readthedocs.io/).

Cloud-init is a commonly-used startup configuration utility for cloud compute
instances. It accepts configuration via provider-specific user data mechanisms,
such as `userData` for Amazon EC2 instances. Multipart MIME is one of the
data formats it accepts. For more information, see
[User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
in the Cloud-init manual.

This is not a generalized utility for producing multipart MIME messages. Its
featureset is specialized for the features of cloud-init.

## Example Usage

```typescript
// Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { DataTemplateCloudinitConfig } from "./.gen/providers/template/data-template-cloudinit-config";
import { DataTemplateFile } from "./.gen/providers/template/data-template-file";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const script = new DataTemplateFile(this, "script", {
      template: Token.asString(Fn.file("${path.module}/init.tpl")),
      vars: {
        consul_address: consul.privateIp,
      },
    });
    const config = new DataTemplateCloudinitConfig(this, "config", {
      base64Encode: true,
      gzip: true,
      part: [
        {
          content: Token.asString(script.rendered),
          contentType: "text/cloud-config",
          filename: "init.cfg",
        },
        {
          content: "baz",
          contentType: "text/x-shellscript",
        },
        {
          content: "ffbaz",
          contentType: "text/x-shellscript",
        },
      ],
    });
    new Instance(this, "web", {
      ami: "ami-d05e75b8",
      instanceType: "t2.micro",
      userDataBase64: Token.asString(config.rendered),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `gzip` - (Optional) Specify whether or not to gzip the rendered output. Defaults to `true`.

* `base64Encode` - (Optional) Base64 encoding of the rendered output. Defaults to `true`,
  and cannot be disabled if `gzip` is `true`.

* `part` - (Required) A nested block type which adds a file to the generated
  cloud-init configuration. Use multiple `part` blocks to specify multiple
  files, which will be included in order of declaration in the final MIME
  document.

Each `part` block expects the following arguments:

* `content` - (Required) Body content for the part.

* `filename` - (Optional) A filename to report in the header for the part.

* `contentType` - (Optional) A MIME-style content type to report in the header for the part.

* `mergeType` - (Optional) A value for the `xMergeType` header of the part,
  to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/topics/merging.html).

## Attributes Reference

The following attributes are exported:

* `rendered` - The final rendered multi-part cloud-init config.

<!-- cache-key: cdktf-0.17.1 input-af9d37b3855119d18ff734678a56cb44a96b097821149cb7e0abc03866ea826b -->